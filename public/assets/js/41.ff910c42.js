(window.webpackJsonp=window.webpackJsonp||[]).push([[41],{542:function(t,s,a){"use strict";a.r(s);var v=a(4),_=Object(v.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"全局执行上下文"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#全局执行上下文"}},[t._v("#")]),t._v(" 全局执行上下文")]),t._v(" "),a("blockquote",[a("p",[t._v("js引擎在全局代码执行之前先创建全局执行上下文对象并进入执行上下文环境")])]),t._v(" "),a("ol",[a("li",[t._v("创建变量对象，该对象用于收集变量，函数，函数的参数")]),t._v(" "),a("li",[t._v("确认this的指向，指向window")]),t._v(" "),a("li",[t._v("创建作用域链，然后开始执行全局代码")])]),t._v(" "),a("h2",{attrs:{id:"局部执行上下文"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#局部执行上下文"}},[t._v("#")]),t._v(" 局部执行上下文")]),t._v(" "),a("ul",[a("li",[t._v("在调用函数，准备执行函数体之前，创建局部执行上下文对象并进入执行上下文环境")]),t._v(" "),a("li",[t._v("创建变量对象，该对象用于收集变量，函数，函数的参数，确定this的指向是调用函数的对象，创建作用域链")]),t._v(" "),a("li",[t._v("因为没有可见的变量指向函数变量对象，所以函数的局部变量都保存在栈内存中，在调用完后立马销毁执行上下文对象，同时也能说明为什么函数在调用完后会立马释放内存空间，如果函数中有一个变量是引用数据类型，那变量保存的是内存地址，保存在栈内存中，数据保存在堆内存中")]),t._v(" "),a("li",[t._v("特殊点：函数局部变量对象没有可见指针，函数执行上下文环境中遇到函数申明会看下边是否有调用函数或者将其作为返回值返回，如果没有就不会提前申明。")])]),t._v(" "),a("h2",{attrs:{id:"执行上下文栈"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#执行上下文栈"}},[t._v("#")]),t._v(" 执行上下文栈")]),t._v(" "),a("ul",[a("li",[t._v("压栈出栈：压的是执行上下文对象，遵循栈数据结构的特点：先进后出，后进先出")])])])}),[],!1,null,null,null);s.default=_.exports}}]);